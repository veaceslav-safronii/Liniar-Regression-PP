[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\User\AppData\Local\Temp\idea2.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\User\AppData\Local\Temp\idea2.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.9.7 (Oracle Corporation Java 17)
[debug] Load.defaultLoad until apply took 231.2371ms
[debug]           Load.loadUnit: plugins took 198.1222ms
[debug]           Load.loadUnit: defsScala took 0.914ms
[debug] [Loading] Scanning directory D:\Universitate\PP\t1_v2\project
[debug]             Load.loadUnit: mkEval took 14.4762ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in D:\Universitate\PP\t1_v2\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 55.2142 ms
[info] loading settings for project t1_v2-build from idea2.sbt ...
[debug]               Load.resolveProject(t1_v2-build) took 89.8664ms
[debug]             Load.loadTransitive: finalizeProject(Project(id t1_v2-build, base: D:\Universitate\PP\t1_v2\project, plugins: List(<none>))) took 186.3308ms
[debug] [Loading] Done in D:\Universitate\PP\t1_v2\project, returning: (t1_v2-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1060.7239ms
[debug]           Load.loadUnit: cleanEvalClasses took 18.7732ms
[debug]         Load.loadUnit(file:/D:/Universitate/PP/t1_v2/project/, ...) took 1294.7666ms
[debug]       Load.apply: load took 1491.3967ms
[debug]       Load.apply: resolveProjects took 15.0762ms
[debug]       Load.apply: finalTransforms took 98.8564ms
[debug]       Load.apply: config.delegates took 10.6146ms
[debug]       Load.apply: Def.make(settings)... took 584.9347ms
[debug]       Load.apply: structureIndex took 138.7334ms
[debug]       Load.apply: mkStreams took 2.5639ms
[info] loading project definition from D:\Universitate\PP\t1_v2\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug]     Load.loadUnit: plugins took 3743.4824ms
[debug]     Load.loadUnit: defsScala took 0.0037ms
[debug] [Loading] Scanning directory D:\Universitate\PP\t1_v2
[debug]       Load.loadUnit: mkEval took 0.4206ms
[debug] [Loading] Found root project root w/ remaining 
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 4.9621 ms
[info] loading settings for project root from build.sbt ...
[debug]         Load.resolveProject(root) took 54.6086ms
[debug]       Load.loadTransitive: finalizeProject(Project(id root, base: D:\Universitate\PP\t1_v2, plugins: List(<none>))) took 62.6024ms
[debug] [Loading] Done in D:\Universitate\PP\t1_v2, returning: (root)
[debug]     Load.loadUnit: loadedProjectsRaw took 239.4678ms
[debug]     Load.loadUnit: cleanEvalClasses took 34.6638ms
[debug]   Load.loadUnit(file:/D:/Universitate/PP/t1_v2/, ...) took 4020.4131ms
[debug] Load.apply: load took 4059.9252ms
[debug] Load.apply: resolveProjects took 0.1751ms
[debug] Load.apply: finalTransforms took 45.5142ms
[debug] Load.apply: config.delegates took 0.452ms
[debug] Load.apply: Def.make(settings)... took 124.9047ms
[debug] Load.apply: structureIndex took 48.0867ms
[debug] Load.apply: mkStreams took 0.0044ms
[info] set current project to t1 (in build file:/D:/Universitate/PP/t1_v2/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 52665 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 52665, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to t1 (in build file:/D:/Universitate/PP/t1_v2/)
[debug] > Exec(idea-shell, None, None)
